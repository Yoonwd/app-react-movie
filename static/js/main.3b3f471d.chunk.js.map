{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","baseOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","Myresponse","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAiEA,SAASA,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC5B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAIxD,SAASC,EAATC,GAA6B,IAARC,EAAQD,EAARC,MACnB,OACER,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAeG,EAA/B,KAoBYC,MArEhB,SAAAC,GAAkD,IAAlCN,EAAkCM,EAAlCN,MAAON,EAA2BY,EAA3BZ,OAAQa,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,SACrC,OACEZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEpCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACZM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAE/Dd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACbL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,OAAO,gBCcJC,6MAjDbC,MAAQ,KAQRC,cAAgB,WAUd,OATeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GACnC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CACLxB,MAAOuB,EAAME,cACb/B,OAAQ6B,EAAMG,mBACdf,IAAKY,EAAMI,GACXpB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAMtBoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CAEZf,WAJS,wBAAAU,EAAAM,SAAAT,EAAAU,WAQbJ,SAAW,WACT,OAAOK,MAAM,6DACZC,KAAK,SAAAC,GAAU,OAAIA,EAAWC,SAC9BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKtB,SACvBuB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA7B1BP,KAAKX,8CAgCE,IACCN,EAAWiB,KAAKpB,MAAhBG,OACR,OAGE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,iBAE9BA,EAASiB,KAAKnB,gBAAkB,qBA7CvB6B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.3b3f471d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport './Movie.css';\r\n\r\n// export default class Movie extends Component {\r\n\r\n// //   부모App에서 받을 프롭스를 한정하기 - 스트링, 필요사항으로  \r\n//   static propTypes = {\r\n//     title: PropTypes.string.isRequired,\r\n//     poster: PropTypes.string.isRequired\r\n//   }  \r\n\r\n//   render() {\r\n//     console.log(this.props);\r\n//     return (\r\n//       <div>\r\n//         <MoviePoster poster={this.props.poster}/>\r\n//         <h1>{this.props.title}</h1>\r\n//       </div>\r\n//     )\r\n//   }\r\n//  }\r\n\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n  return (\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie__Column\">\r\n        <MoviePoster poster={poster} alt={title}/>\r\n      </div>  \r\n      <div className=\"Movie__Column\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie__Genres\">\r\n          {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n        </div>\r\n        <div className=\"Movie__Synopsis\">\r\n          <LinesEllipsis\r\n            text={synopsis}\r\n            maxLine='3'\r\n            ellipsis='...'\r\n            trimRight\r\n            baseOn='letters'\r\n            />\r\n        </div>\r\n      </div>    \r\n    </div>\r\n  )  \r\n}\r\n\r\n//  class MoviePoster extends Component {\r\n\r\n//   // 부모요소에서 받아야 할 필요사항 체크\r\n//     static propTypes = {\r\n//       poster: PropTypes.string.isRequired\r\n//     }\r\n\r\n//     render() {\r\n//         console.log(this.props);\r\n//         return (\r\n//             <img src={this.props.poster} alt=\"poster\"/>\r\n//         )\r\n//     }\r\n//  }\r\n \r\n// 스테이트없는 컴포넌트 - 렌더함수, 라이프사이클없음\r\nfunction MoviePoster({poster, alt}) {\r\n  return (\r\n      <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\r\n  )\r\n}\r\n\r\nfunction MovieGenre({genre}) {\r\n  return (\r\n    <span className=\"Movie_Genre\">{genre} </span>\r\n  )\r\n}\r\n\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired\r\n}\r\n \r\nMovieGenre.propTypes = {\r\n  genre: PropTypes.array.isRequired,\r\n}\r\n\r\n export default Movie;\r\n\r\n//클래스 컴포넌트는 this.props 를 써줘야 한다. 함수 컴포넌트는 필요없다.","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  state = {}\n \n  // 컴.디.마의 코드량 줄이는 효과\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  // 렌더링할 요소 선택해서 맵핑 후 리턴\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image} \n        key={movie.id} \n        genres={movie.genres}\n        synopsis={movie.synopsis} \n      /> //movies 배열을 맵해서 새로운 컴포넌트를 만든다.\n    })\n    return movies\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      // movies: movies\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=like_count')\n    .then(Myresponse => Myresponse.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    const { movies } = this.state; \n    return (\n\n      // 클래스 이름 분기해서 다른 css 적용하기\n      <div className={movies ? \"App\" : \" App--loading\"}>\n        {/* movies 키값이 있냐? */}\n        {movies ? this._renderMovies() : 'Loading...'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// 맵함수와 같은 컴포넌트\n/* \n  <Movie title={movies[0].title} poster={movies[0].poster} />\n  <Movie title={movies[1].title} poster={movies[1].poster} />\n  <Movie title={movies[2].title} poster={movies[2].poster} />\n  <Movie title={movies[3].title} poster={movies[3].poster} />\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}